Q. SUM OF THREE NUMBERS

1.  START
2.  Initialize three variables to take input  
3.  Initialize an output variable to store result
4.  INPUT values to each of input variables
5.  ADD three variable
6.  STORE the result to output variable
7.  PRINT result
8.  STOP


Q.  SUM OF SQUARES OF TWO NUMBERS

1.  START
2.  Initialize two variables to take input
3.  Initialize an output variable to store result
4.  SUM SQUARE of two input variables
5.  STORE the result to output variable
6.  PRINT the result
7.  STOP

Q. REVERSE A NUMBER

1.  START
2.  READ the input
3.  Initialize the output variable to zero
4.  WHILE INPUT>0
        Temporary variable = input % 10
        output variable = output variable * 10 + Temporary variable
        input variable = n // 10
5.  PRINT output variable
6.  STOP

Q. REVERSE A STRING

1.  START
2.  READ the input String as String
3.  Initialize an empty String as Reverse_String  
4.  FOR EACH CHARACTER IN String
        Reverse_String = CHARACTER + Reverse_String
5.  PRINT Reverse_String
6.  STOP

Q. FIND GIVEN CHARACTER IN STRING, RETURN TRUE OR FALSE

1.  START
2.  READ the input String as String
3.  READ the variable to be checked as Alphabet
4.  FOR EACH CHARACTER IN String
        IF CHARACTER == Alphabet
            PRINT  TRUE
            BREAK
5.  PRINT FALSE
6.  STOP

Q. FIND THE OCCURANCES OF A CHARACTER IN A GIVEN STRING

1.  START
2.  READ the input string as String
3.  READ the variable to be counted as Alphabet
4.  Initialize a count variable as Count = 0
5.  FOR EACH CHARACTER IN String
        IF CHARACTER == Alphabet
        Count = Count+1
6.  PRINT Count
7.  STOP
    
    
Q. FIBONACCI SERIES OF A NUMBER

1.  START
2.  CREATE a function Fibonacci(Limit)
        IF Limit <= 0
            RETURN []
        IF Limit == 1
            RETURN [0]
        IF Limit == 2   
            RETURN [1,2]
        
        CREATE an array Fibonacci_series
        ADD zero to Fibonacci_series
        ADD one to Fibonacci_series

        FOR i=0 to n-1 do
            next_value = Fibonacci_series[i-1] + Fibonacci_series[i-2]
            ADD next_value to Fibonacci_series

        RETURN Fibonacci_series
3.  READ the limit as n
4.  output = CALL Fibonacci(n)
5.  PRINT output
6.  STOP

Q.  LINEAR SEARCH

1.  START
2.  READ inputs to array 
3.  READ Element to be searched
4.  FOR i=0 to length(array) 
        IF Element == array[i]
        PRINT Element found
        BREAK
5.  PRINT Element not found
6.  STOP

Q. BINARY SEARCH


1.  START
2.  READ soterd inputs to array
3.  READ Element to be searched
4.  Initialize lower_index = 0, last_index = length(array) - 1
5.  while lower_index <= last_index
        set mid_index = (lower_index + last_index)//2

        IF array[mid_index] == Element
            print Element found at (mid_index+1)th position
            BREAK
        ELSE IF array(mid_index) < Element 
            lower_index = mid_index + 1
        ELSE
            last_index = mid_index - 1

6.  PRINT Element not found
7.  STOP

